name: Agriculture API Documentation Generation

on:
  # Weekly schedule (every Sunday at 00:00 UTC)
  schedule:
    - cron: '0 0 * * 0'
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
  
  # Trigger on push to main branch or when documentation files change
  push:
    branches:
      - main
    paths:
      - 'docs/api-templates/**'
      - 'scripts/generate-agriculture-docs.py'
      - '.github/workflows/agriculture-docs-generation.yml'

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml
        # Additional dependencies for PDF generation would be added here
        # pip install weasyprint

    - name: Generate API documentation
      run: |
        cd scripts
        python generate-agriculture-docs.py --validate --format all

    - name: Verify documentation generation
      run: |
        # Check if documentation files were created
        if [ ! -f "docs/api/agriculture-api.md" ]; then
          echo "Error: Markdown documentation not generated"
          exit 1
        fi
        
        if [ ! -f "docs/api/agriculture-api.html" ]; then
          echo "Error: HTML documentation not generated"
          exit 1
        fi
        
        if [ ! -f "docs/api/openapi-spec.json" ]; then
          echo "Error: OpenAPI JSON spec not generated"
          exit 1
        fi
        
        if [ ! -f "docs/api/openapi-spec.yaml" ]; then
          echo "Error: OpenAPI YAML spec not generated"
          exit 1
        fi
        
        if [ ! -f "docs/api/generation-report.json" ]; then
          echo "Error: Generation report not created"
          exit 1
        fi
        
        echo "All documentation files verified successfully"

    - name: Validate OpenAPI specification
      run: |
        # Basic validation of OpenAPI spec
        python -c "
        import json
        import yaml
        
        # Validate JSON spec
        with open('docs/api/openapi-spec.json', 'r') as f:
            json_spec = json.load(f)
        
        # Validate YAML spec
        with open('docs/api/openapi-spec.yaml', 'r') as f:
            yaml_spec = yaml.safe_load(f)
        
        # Check required fields
        required_fields = ['openapi', 'info', 'paths']
        for field in required_fields:
            if field not in json_spec:
                raise Exception(f'Missing required field in JSON: {field}')
            if field not in yaml_spec:
                raise Exception(f'Missing required field in YAML: {field}')
        
        print('OpenAPI specification validation passed')
        "

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: agriculture-api-docs
        path: |
          docs/api/
        retention-days: 7

  deploy-docs:
    runs-on: ubuntu-latest
    needs: generate-docs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download documentation artifacts
      uses: actions/download-artifact@v4
      with:
        name: agriculture-api-docs
        path: docs/api/

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/api
        keep_files: true
        destination_dir: agriculture-api

    - name: Verify deployment
      run: |
        echo "Documentation deployed to GitHub Pages"
        echo "URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/agriculture-api/agriculture-api.html"

  notify-success:
    runs-on: ubuntu-latest
    needs: [generate-docs, deploy-docs]
    if: always()
    
    steps:
    - name: Download generation report
      uses: actions/download-artifact@v4
      with:
        name: agriculture-api-docs
        path: /tmp/docs

    - name: Parse generation report
      id: report
      run: |
        if [ -f "/tmp/docs/generation-report.json" ]; then
          REPORT=$(cat /tmp/docs/generation-report.json)
          SUCCESSFUL=$(echo "$REPORT" | jq '.summary.successful')
          TOTAL=$(echo "$REPORT" | jq '.summary.total')
          echo "successful=$SUCCESSFUL" >> $GITHUB_OUTPUT
          echo "total=$TOTAL" >> $GITHUB_OUTPUT
        else
          echo "successful=0" >> $GITHUB_OUTPUT
          echo "total=0" >> $GITHUB_OUTPUT
        fi

    - name: Send success notification
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          const { successful, total } = process.env;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `✅ **Documentation Generation Successful**\n\n- Generated ${successful}/${total} operations successfully\n- OpenAPI specification validated\n- Documentation deployed to GitHub Pages\n\nView documentation: https://${context.repo.owner}.github.io/${context.repo.repo}/agriculture-api/agriculture-api.html`
          })

    - name: Send failure notification
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '❌ **Documentation Generation Failed**\n\nPlease check the workflow logs for details.'
          })